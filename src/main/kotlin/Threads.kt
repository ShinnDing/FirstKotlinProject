

class Threads {

    fun printTheMessage() {
        println("testing")
    }

    var sharedNumber: Int = 100
    

        Thread tP = new Thread(() -> producer())
        Thread tC = new Thread(() -> consumer())
        tP.start()
        tC.start()
    }

    /*
     * The producer() method loops 5 times and replaces the sharedNumber with
     * the loop iteration (0 to 4, inclusive).
     */
    private void producer() {
        for (int i = 0; i <= 4; i++ ) {
            try {
                Thread.sleep(forRandomWaitTime())
            } catch (InterruptedException x) {
                // do nothing and let thread die
            }
            sharedNumber = i
        }
    }

    /*
     * The consumer() method reads the shared number, adds each iteration from
     * producer to the shared number, and prints the sum to a data file.
     *
     * @param sum   -the sum of each shared number read by consumer()
     */
    private void consumer() {
        int sum = 0

        for (int i = 0; i <= 4; i++ ) {
            try {
                Thread.sleep(forRandomWaitTime());
                sum = sum + sharedNumber;
            } catch (InterruptedException x) {
                // do nothing and let thread die
            }
        }
        addToDataFile(sum)
    }

    /*
     * The forRandomWaitTime method creates a random wait time of 1 to 3
     * (inclusive) seconds.
     *
     * @param randomNumber      -random double generated by Math.random()
     * @param randomWaitTime    -wait time of 1, 2, or 3 seconds, depending on
     *                           randomNumber
     */
    private int forRandomWaitTime() {
        double randomNumber = Math.random()
        int randomWaitTime = 0

        if (randomNumber == 1.0) {
            randomWaitTime = 1000
        } else if (randomNumber < 0.5) {
            randomWaitTime = 2000
        } else {
            randomWaitTime = 3000
        }
        return randomWaitTime
    }

    /*
     * The addToDataFile method adds data to the data file - first the name and
     * assignment, then the sum created by each run of the program.
     *
     * @param file      -creates the File() to write to
     * @param fw        -FileWriter that allows data to be appended
     * @param output    -PrintWriter that prints data to FileWriter
     */
    private void addToDataFile(int sum) {
        try {
            File file = new File("shinn-asg2.txt")
            FileWriter fw = new FileWriter(file, true); // true to append data
            // to file
            PrintWriter output = new PrintWriter(fw)
            if (file.length() == 0) {
                output.println("Stephanie Shinn\n" + "Assignment 2\n")
            }
            output.println("The sum is " + sum)
            output.flush()
            output.close()
        } catch (IOException x) {
            x.printStackTrace()
        }
    }
}


}